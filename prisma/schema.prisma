// @/prisma/schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // url               = env("DATABASE_URL")
  // directUrl         = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum Interval {
  DAY
  WEEK
  MONTH
}

model Pool {
  id            String   @id @default(cuid())
  note          String
  interval      Interval
  startDate     DateTime @default(now()) @map("start_date")
  active        Boolean  @default(true)
  lastSent      DateTime? @map("last_sent")

  venmoId String @map("venmo_id")
  venmo   Venmo  @relation(fields: [venmoId], references: [id], onDelete: Cascade)

  transactions Transaction[]
  users        PoolUser[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("pools")
}

model PoolUser {
  id       String    @id @default(cuid())
  amount   Int       @default(0)
  lastSent DateTime? @map("last_sent")

  poolId String @map("pool_id")
  pool   Pool   @relation(fields: [poolId], references: [id], onDelete: Cascade)

  venmoId String @map("venmo_id")
  venmo   Venmo  @relation(fields: [venmoId], references: [id], onDelete: Cascade)

  @@unique([poolId, venmoId])
  @@map("poolusers")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

enum Status {
  SUCCEEDED
  FAILED
  PENDING
  CANCELLED
}

model Transaction {
  id     String  @id @default(cuid())
  poolId String? @map("pool_id")
  pool   Pool?   @relation(fields: [poolId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  status Status  @default(PENDING)
  amount Int
  pid    String?

  payerId String @map("payer_id")
  payer   Venmo  @relation("payments", fields: [payerId], references: [id], onDelete: Cascade)

  payeeId String @map("payee_id")
  payee   Venmo  @relation("requests", fields: [payeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("transactions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  venmo Venmo?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Venmo {
  id          String    @id @default(cuid())
  username    String
  displayName String    @map("display_name")
  image       String?
  accessToken String?   @map("access_token")
  expiredAt   DateTime? @map("expired_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String? @unique @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  pools        PoolUser[]
  poolsCreated Pool[]

  payments Transaction[] @relation("payments")
  requests Transaction[] @relation("requests")

  @@map("venmos")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
